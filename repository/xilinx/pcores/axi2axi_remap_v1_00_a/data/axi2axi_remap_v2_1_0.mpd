BEGIN axi2axi_remap

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = VERILOG
OPTION RUN_NGCBUILD = FALSE
OPTION STYLE = HDL
OPTION DESC = AXI to AXI Remap
OPTION LONG_DESC = Address Remapping Bridge Between Two AXI Interconnects
OPTION IP_GROUP = Bus and Bridge:MICROBLAZE:ARM-A9
OPTION ARCH_SUPPORT_MAP = (spartan6t=PRODUCTION, spartan6=PRODUCTION, spartan6l=PRODUCTION, qspartan6t=PRODUCTION, qspartan6=PRODUCTION, aspartan6t=PRODUCTION, aspartan6=PRODUCTION, virtex6lx=PRODUCTION, virtex6sx=PRODUCTION, virtex6cx=PRODUCTION, virtex6llx=PRODUCTION, virtex6lsx=PRODUCTION, qspartan6l=PRODUCTION, qvirtex6lx=PRODUCTION, qvirtex6sx=PRODUCTION, qvirtex6fx=PRODUCTION, qvirtex6tx=PRODUCTION, virtex7=PRODUCTION, kintex7=PRODUCTION, artix7=PRE_PRODUCTION, zynq=PRODUCTION, virtex7l=PRE_PRODUCTION, kintex7l=PRE_PRODUCTION, aartix7=PRE_PRODUCTION, artix7l=PRE_PRODUCTION, virtex7ht=PRE_PRODUCTION, qvirtex7=PRE_PRODUCTION, qkintex7=PRE_PRODUCTION, qkintex7l=PRE_PRODUCTION, qartix7=PRE_PRODUCTION, qartix7l=PRE_PRODUCTION, azynq=PRE_PRODUCTION, qzynq=PRE_PRODUCTION, qvirtex7l=PRE_PRODUCTION)


## Bus Interfaces
BUS_INTERFACE BUS = S_AXI, BUS_TYPE = SLAVE, BUS_STD = AXI
BUS_INTERFACE BUS = M_AXI, BUS_TYPE = MASTER, BUS_STD = AXI

## Generics for VHDL or Parameters for Verilog
PARAMETER C_S_AXI_ADDR_WIDTH = 32, BUS = S_AXI, DT = INTEGER, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_DATA_WIDTH = 32, BUS = S_AXI, DT = INTEGER, ASSIGNMENT = UPDATE
PARAMETER C_S_AXI_ACLK_FREQ_HZ = 100000000, BUS = S_AXI, DT = integer, ASSIGNMENT = UPDATE, TYPE = NON_HDL
PARAMETER C_S_AXI_ID_WIDTH = 1, BUS = S_AXI, DT = INTEGER, ASSIGNMENT = UPDATE
PARAMETER C_S_AXI_PROTOCOL = AXI4, BUS = S_AXI, DT = string, ASSIGNMENT = OPTIONAL, TYPE = NON_HDL, VALUES = (AXI4=AXI4, AXI3=AXI3, AXI4LITE = AXI4LITE)
PARAMETER C_S_AXI_SUPPORTS_NARROW_BURST = 1, BUS = S_AXI, DT = integer, ASSIGNMENT = OPTIONAL_UPDATE, TYPE = NON_HDL, RANGE = (0, 1)
PARAMETER C_S_AXI_SUPPORTS_READ = 1, BUS = S_AXI, DT = integer, ASSIGNMENT = OPTIONAL_UPDATE, TYPE = NON_HDL, RANGE = (0,1)
PARAMETER C_S_AXI_SUPPORTS_WRITE = 1, BUS = S_AXI, DT = integer, ASSIGNMENT = OPTIONAL_UPDATE, TYPE = NON_HDL, RANGE = (0,1)
PARAMETER C_S_AXI_SUPPORTS_USER_SIGNALS = 0, BUS = S_AXI, DT = INTEGER, ASSIGNMENT = OPTIONAL, TYPE = NON_HDL, RANGE = (0,1)
PARAMETER C_S_AXI_AWUSER_WIDTH = 1, BUS = S_AXI, DT = INTEGER, ASSIGNMENT = OPTIONAL, RANGE = (1:2147483647), ISVALID = (C_S_AXI_SUPPORTS_USER_SIGNALS == 1)
PARAMETER C_S_AXI_ARUSER_WIDTH = 1, BUS = S_AXI, DT = INTEGER, ASSIGNMENT = OPTIONAL, RANGE = (1:2147483647), ISVALID = (C_S_AXI_SUPPORTS_USER_SIGNALS == 1)
PARAMETER C_S_AXI_WUSER_WIDTH = 1, BUS = S_AXI, DT = INTEGER, ASSIGNMENT = OPTIONAL, RANGE = (1:2147483647), ISVALID = (C_S_AXI_SUPPORTS_USER_SIGNALS == 1)
PARAMETER C_S_AXI_RUSER_WIDTH = 1, BUS = S_AXI, DT = INTEGER, ASSIGNMENT = OPTIONAL, RANGE = (1:2147483647), ISVALID = (C_S_AXI_SUPPORTS_USER_SIGNALS == 1)
PARAMETER C_S_AXI_BUSER_WIDTH = 1, BUS = S_AXI, DT = INTEGER, ASSIGNMENT = OPTIONAL, RANGE = (1:2147483647), ISVALID = (C_S_AXI_SUPPORTS_USER_SIGNALS == 1)
PARAMETER C_INTERCONNECT_S_AXI_WRITE_ACCEPTANCE = 8, DT = INTEGER, ASSIGNMENT = OPTIONAL_UPDATE, TYPE = NON_HDL, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_acceptance
PARAMETER C_INTERCONNECT_S_AXI_READ_ACCEPTANCE = 8, DT = INTEGER, ASSIGNMENT = OPTIONAL_UPDATE, TYPE = NON_HDL, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_acceptance
PARAMETER C_M_AXI_ADDR_WIDTH = 32, BUS = M_AXI, DT = INTEGER, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_M_AXI_DATA_WIDTH = 32, BUS = M_AXI, DT = INTEGER, ASSIGNMENT = UPDATE, TYPE = NON_HDL
PARAMETER C_M_AXI_PROTOCOL = AXI4, BUS = M_AXI, DT = string, ASSIGNMENT = UPDATE, TYPE = NON_HDL, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_protocol
PARAMETER C_M_AXI_ACLK_FREQ_HZ = 100000000, BUS = M_AXI, DT = integer, ASSIGNMENT = UPDATE, TYPE = NON_HDL
PARAMETER C_M_AXI_SUPPORTS_THREADS = 1, BUS = M_AXI, DT = integer, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_M_AXI_THREAD_ID_WIDTH = 1, BUS = M_AXI, DT = integer, ASSIGNMENT = UPDATE, TYPE = NON_HDL
PARAMETER C_M_AXI_SUPPORTS_NARROW_BURST = 1, BUS = M_AXI, DT = integer, ASSIGNMENT = UPDATE, TYPE = NON_HDL
PARAMETER C_M_AXI_SUPPORTS_READ = 1, BUS = M_AXI, DT = integer, ASSIGNMENT = UPDATE, TYPE = NON_HDL, RANGE = (0,1)
PARAMETER C_M_AXI_SUPPORTS_WRITE = 1, BUS = M_AXI, DT = integer, ASSIGNMENT = UPDATE, TYPE = NON_HDL, RANGE = (0,1)
PARAMETER C_M_AXI_SUPPORTS_USER_SIGNALS = 0, BUS = M_AXI, DT = INTEGER, ASSIGNMENT = UPDATE, TYPE = NON_HDL, RANGE = (0,1), IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_user_sig
PARAMETER C_M_AXI_AWUSER_WIDTH = 1, BUS = M_AXI, DT = INTEGER, ASSIGNMENT = UPDATE, TYPE = NON_HDL, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_usig_width
PARAMETER C_M_AXI_ARUSER_WIDTH = 1, BUS = M_AXI, DT = INTEGER, ASSIGNMENT = UPDATE, TYPE = NON_HDL, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_usig_width
PARAMETER C_M_AXI_WUSER_WIDTH = 1, BUS = M_AXI, DT = INTEGER, ASSIGNMENT = UPDATE, TYPE = NON_HDL, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_usig_width
PARAMETER C_M_AXI_RUSER_WIDTH = 1, BUS = M_AXI, DT = INTEGER, ASSIGNMENT = UPDATE, TYPE = NON_HDL, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_usig_width
PARAMETER C_M_AXI_BUSER_WIDTH = 1, BUS = M_AXI, DT = INTEGER, ASSIGNMENT = UPDATE, TYPE = NON_HDL, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_usig_width
PARAMETER C_INTERCONNECT_M_AXI_WRITE_ISSUING = 8, DT = integer, ASSIGNMENT = UPDATE, TYPE = NON_HDL, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_write_issuing, LONG_DESC = Maximum number of active write transactions that the bus interface can generate. For this IP, this value is copied over from the C_INTERCONNECT_S_AXI_WRITE_ACCEPTANCE parameter.
PARAMETER C_INTERCONNECT_M_AXI_READ_ISSUING = 8, DT = integer, ASSIGNMENT = UPDATE, TYPE = NON_HDL, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_read_issuing, LONG_DESC = Maximum number of active read transactions that the bus interface can generate. For this IP, this value is copied over from the C_INTERCONNECT_S_AXI_READ_ACCEPTANCE parameter.
PARAMETER C_S_AXI_NUM_ADDR_RANGES = 1, BUS = S_AXI, DT = INTEGER, TYPE = NON_HDL, RANGE = (1:16), BRIDGE_TO = M_AXI
PARAMETER C_S_AXI_RNG00_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S_AXI_RNG00_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 1), TYPE = NON_HDL, MIN_SIZE = 0x1000, BRIDGE_TO = M_AXI
PARAMETER C_S_AXI_RNG01_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S_AXI_RNG01_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 2), TYPE = NON_HDL, MIN_SIZE = 0x1000, BRIDGE_TO = M_AXI
PARAMETER C_S_AXI_RNG02_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S_AXI_RNG02_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 3), TYPE = NON_HDL, MIN_SIZE = 0x1000, BRIDGE_TO = M_AXI
PARAMETER C_S_AXI_RNG03_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S_AXI_RNG03_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 4), TYPE = NON_HDL, MIN_SIZE = 0x1000, BRIDGE_TO = M_AXI
PARAMETER C_S_AXI_RNG04_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S_AXI_RNG04_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 5), TYPE = NON_HDL, MIN_SIZE = 0x1000, BRIDGE_TO = M_AXI
PARAMETER C_S_AXI_RNG05_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S_AXI_RNG05_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 6), TYPE = NON_HDL, MIN_SIZE = 0x1000, BRIDGE_TO = M_AXI
PARAMETER C_S_AXI_RNG06_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S_AXI_RNG06_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 7), TYPE = NON_HDL, MIN_SIZE = 0x1000, BRIDGE_TO = M_AXI
PARAMETER C_S_AXI_RNG07_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S_AXI_RNG07_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 8), TYPE = NON_HDL, MIN_SIZE = 0x1000, BRIDGE_TO = M_AXI
PARAMETER C_S_AXI_RNG08_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S_AXI_RNG08_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 9), TYPE = NON_HDL, MIN_SIZE = 0x1000, BRIDGE_TO = M_AXI
PARAMETER C_S_AXI_RNG09_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S_AXI_RNG09_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 10), TYPE = NON_HDL, MIN_SIZE = 0x1000, BRIDGE_TO = M_AXI
PARAMETER C_S_AXI_RNG10_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S_AXI_RNG10_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 11), TYPE = NON_HDL, MIN_SIZE = 0x1000, BRIDGE_TO = M_AXI
PARAMETER C_S_AXI_RNG11_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S_AXI_RNG11_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 12), TYPE = NON_HDL, MIN_SIZE = 0x1000, BRIDGE_TO = M_AXI
PARAMETER C_S_AXI_RNG12_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S_AXI_RNG12_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 13), TYPE = NON_HDL, MIN_SIZE = 0x1000, BRIDGE_TO = M_AXI
PARAMETER C_S_AXI_RNG13_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S_AXI_RNG13_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 14), TYPE = NON_HDL, MIN_SIZE = 0x1000, BRIDGE_TO = M_AXI
PARAMETER C_S_AXI_RNG14_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S_AXI_RNG14_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 15), TYPE = NON_HDL, MIN_SIZE = 0x1000, BRIDGE_TO = M_AXI
PARAMETER C_S_AXI_RNG15_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S_AXI_RNG15_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 16), TYPE = NON_HDL, MIN_SIZE = 0x1000, BRIDGE_TO = M_AXI
PARAMETER C_S_AXI_RNG00_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S_AXI_RNG00_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 1), TYPE = NON_HDL, BRIDGE_TO = M_AXI
PARAMETER C_S_AXI_RNG01_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S_AXI_RNG01_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 2), TYPE = NON_HDL, BRIDGE_TO = M_AXI
PARAMETER C_S_AXI_RNG02_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S_AXI_RNG02_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 3), TYPE = NON_HDL, BRIDGE_TO = M_AXI
PARAMETER C_S_AXI_RNG03_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S_AXI_RNG03_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 4), TYPE = NON_HDL, BRIDGE_TO = M_AXI
PARAMETER C_S_AXI_RNG04_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S_AXI_RNG04_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 5), TYPE = NON_HDL, BRIDGE_TO = M_AXI
PARAMETER C_S_AXI_RNG05_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S_AXI_RNG05_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 6), TYPE = NON_HDL, BRIDGE_TO = M_AXI
PARAMETER C_S_AXI_RNG06_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S_AXI_RNG06_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 7), TYPE = NON_HDL, BRIDGE_TO = M_AXI
PARAMETER C_S_AXI_RNG07_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S_AXI_RNG07_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 8), TYPE = NON_HDL, BRIDGE_TO = M_AXI
PARAMETER C_S_AXI_RNG08_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S_AXI_RNG08_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 9), TYPE = NON_HDL, BRIDGE_TO = M_AXI
PARAMETER C_S_AXI_RNG09_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S_AXI_RNG09_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 10), TYPE = NON_HDL, BRIDGE_TO = M_AXI
PARAMETER C_S_AXI_RNG10_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S_AXI_RNG10_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 11), TYPE = NON_HDL, BRIDGE_TO = M_AXI
PARAMETER C_S_AXI_RNG11_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S_AXI_RNG11_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 12), TYPE = NON_HDL, BRIDGE_TO = M_AXI
PARAMETER C_S_AXI_RNG12_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S_AXI_RNG12_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 13), TYPE = NON_HDL, BRIDGE_TO = M_AXI
PARAMETER C_S_AXI_RNG13_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S_AXI_RNG13_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 14), TYPE = NON_HDL, BRIDGE_TO = M_AXI
PARAMETER C_S_AXI_RNG14_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S_AXI_RNG14_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 15), TYPE = NON_HDL, BRIDGE_TO = M_AXI
PARAMETER C_S_AXI_RNG15_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S_AXI_RNG15_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 16), TYPE = NON_HDL, BRIDGE_TO = M_AXI

## Ports
PORT ACLK = "", DIR = I, SIGIS = CLK, BUS = S_AXI:M_AXI
PORT ARESETN = ARESETN, DIR = I, SIGIS = RST, BUS = S_AXI:M_AXI
PORT S_AXI_AWID = AWID, BUS = S_AXI, DIR = I, VEC = [(C_S_AXI_ID_WIDTH-1):0]
PORT S_AXI_AWADDR = AWADDR, BUS = S_AXI, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0]
PORT S_AXI_AWLEN = AWLEN, BUS = S_AXI, DIR = I, VEC = [(8-1):0]
PORT S_AXI_AWSIZE = AWSIZE, BUS = S_AXI, DIR = I, VEC = [(3-1):0]
PORT S_AXI_AWBURST = AWBURST, BUS = S_AXI, DIR = I, VEC = [(2-1):0]
PORT S_AXI_AWLOCK = AWLOCK, BUS = S_AXI, DIR = I, VEC = [(2-1):0]
PORT S_AXI_AWCACHE = AWCACHE, BUS = S_AXI, DIR = I, VEC = [(4-1):0]
PORT S_AXI_AWPROT = AWPROT, BUS = S_AXI, DIR = I, VEC = [(3-1):0]
PORT S_AXI_AWREGION = AWREGION, BUS = S_AXI, DIR = I, VEC = [(4-1):0]
PORT S_AXI_AWQOS = AWQOS, BUS = S_AXI, DIR = I, VEC = [(4-1):0]
PORT S_AXI_AWUSER = AWUSER, BUS = S_AXI, DIR = I, VEC = [(C_S_AXI_AWUSER_WIDTH-1):0]
PORT S_AXI_AWVALID = AWVALID, BUS = S_AXI, DIR = I
PORT S_AXI_AWREADY = AWREADY, BUS = S_AXI, DIR = O
PORT S_AXI_WID = WID, BUS = S_AXI, DIR = I, VEC = [(C_S_AXI_ID_WIDTH-1):0]
PORT S_AXI_WDATA = WDATA, BUS = S_AXI, DIR = I, VEC = [(C_S_AXI_DATA_WIDTH-1):0]
PORT S_AXI_WSTRB = WSTRB, BUS = S_AXI, DIR = I, VEC = [((C_S_AXI_DATA_WIDTH/8)-1):0]
PORT S_AXI_WLAST = WLAST, BUS = S_AXI, DIR = I
PORT S_AXI_WUSER = WUSER, BUS = S_AXI, DIR = I, VEC = [(C_S_AXI_WUSER_WIDTH-1):0]
PORT S_AXI_WVALID = WVALID, BUS = S_AXI, DIR = I
PORT S_AXI_WREADY = WREADY, BUS = S_AXI, DIR = O
PORT S_AXI_BID = BID, BUS = S_AXI, DIR = O, VEC = [(C_S_AXI_ID_WIDTH-1):0]
PORT S_AXI_BRESP = BRESP, BUS = S_AXI, DIR = O, VEC = [(2-1):0]
PORT S_AXI_BUSER = BUSER, BUS = S_AXI, DIR = O, VEC = [(C_S_AXI_BUSER_WIDTH-1):0]
PORT S_AXI_BVALID = BVALID, BUS = S_AXI, DIR = O
PORT S_AXI_BREADY = BREADY, BUS = S_AXI, DIR = I
PORT S_AXI_ARID = ARID, BUS = S_AXI, DIR = I, VEC = [(C_S_AXI_ID_WIDTH-1):0]
PORT S_AXI_ARADDR = ARADDR, BUS = S_AXI, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0]
PORT S_AXI_ARLEN = ARLEN, BUS = S_AXI, DIR = I, VEC = [(8-1):0]
PORT S_AXI_ARSIZE = ARSIZE, BUS = S_AXI, DIR = I, VEC = [(3-1):0]
PORT S_AXI_ARBURST = ARBURST, BUS = S_AXI, DIR = I, VEC = [(2-1):0]
PORT S_AXI_ARLOCK = ARLOCK, BUS = S_AXI, DIR = I, VEC = [(2-1):0]
PORT S_AXI_ARCACHE = ARCACHE, BUS = S_AXI, DIR = I, VEC = [(4-1):0]
PORT S_AXI_ARPROT = ARPROT, BUS = S_AXI, DIR = I, VEC = [(3-1):0]
PORT S_AXI_ARREGION = ARREGION, BUS = S_AXI, DIR = I, VEC = [(4-1):0]
PORT S_AXI_ARQOS = ARQOS, BUS = S_AXI, DIR = I, VEC = [(4-1):0]
PORT S_AXI_ARUSER = ARUSER, BUS = S_AXI, DIR = I, VEC = [(C_S_AXI_ARUSER_WIDTH-1):0]
PORT S_AXI_ARVALID = ARVALID, BUS = S_AXI, DIR = I
PORT S_AXI_ARREADY = ARREADY, BUS = S_AXI, DIR = O
PORT S_AXI_RID = RID, BUS = S_AXI, DIR = O, VEC = [(C_S_AXI_ID_WIDTH-1):0]
PORT S_AXI_RDATA = RDATA, BUS = S_AXI, DIR = O, VEC = [(C_S_AXI_DATA_WIDTH-1):0]
PORT S_AXI_RRESP = RRESP, BUS = S_AXI, DIR = O, VEC = [(2-1):0]
PORT S_AXI_RLAST = RLAST, BUS = S_AXI, DIR = O
PORT S_AXI_RUSER = RUSER, BUS = S_AXI, DIR = O, VEC = [(C_S_AXI_RUSER_WIDTH-1):0]
PORT S_AXI_RVALID = RVALID, BUS = S_AXI, DIR = O
PORT S_AXI_RREADY = RREADY, BUS = S_AXI, DIR = I
PORT M_AXI_AWID = AWID, BUS = M_AXI, DIR = O, VEC = [(C_S_AXI_ID_WIDTH-1):0]
PORT M_AXI_AWADDR = AWADDR, BUS = M_AXI, DIR = O, VEC = [(C_S_AXI_ADDR_WIDTH-1):0]
PORT M_AXI_AWLEN = AWLEN, BUS = M_AXI, DIR = O, VEC = [(8-1):0]
PORT M_AXI_AWSIZE = AWSIZE, BUS = M_AXI, DIR = O, VEC = [(3-1):0]
PORT M_AXI_AWBURST = AWBURST, BUS = M_AXI, DIR = O, VEC = [(2-1):0]
PORT M_AXI_AWLOCK = AWLOCK, BUS = M_AXI, DIR = O, VEC = [(2-1):0]
PORT M_AXI_AWCACHE = AWCACHE, BUS = M_AXI, DIR = O, VEC = [(4-1):0]
PORT M_AXI_AWPROT = AWPROT, BUS = M_AXI, DIR = O, VEC = [(3-1):0]
PORT M_AXI_AWREGION = AWREGION, BUS = M_AXI, DIR = O, VEC = [(4-1):0]
PORT M_AXI_AWQOS = AWQOS, BUS = M_AXI, DIR = O, VEC = [(4-1):0]
PORT M_AXI_AWUSER = AWUSER, BUS = M_AXI, DIR = O, VEC = [(C_S_AXI_AWUSER_WIDTH-1):0]
PORT M_AXI_AWVALID = AWVALID, BUS = M_AXI, DIR = O
PORT M_AXI_AWREADY = AWREADY, BUS = M_AXI, DIR = I
PORT M_AXI_WID = WID, BUS = M_AXI, DIR = O, VEC = [(C_S_AXI_ID_WIDTH-1):0]
PORT M_AXI_WDATA = WDATA, BUS = M_AXI, DIR = O, VEC = [(C_S_AXI_DATA_WIDTH-1):0]
PORT M_AXI_WSTRB = WSTRB, BUS = M_AXI, DIR = O, VEC = [((C_S_AXI_DATA_WIDTH/8)-1):0]
PORT M_AXI_WLAST = WLAST, BUS = M_AXI, DIR = O
PORT M_AXI_WUSER = WUSER, BUS = M_AXI, DIR = O, VEC = [(C_S_AXI_WUSER_WIDTH-1):0]
PORT M_AXI_WVALID = WVALID, BUS = M_AXI, DIR = O
PORT M_AXI_WREADY = WREADY, BUS = M_AXI, DIR = I
PORT M_AXI_BID = BID, BUS = M_AXI, DIR = I, VEC = [(C_S_AXI_ID_WIDTH-1):0]
PORT M_AXI_BRESP = BRESP, BUS = M_AXI, DIR = I, VEC = [(2-1):0]
PORT M_AXI_BUSER = BUSER, BUS = M_AXI, DIR = I, VEC = [(C_S_AXI_BUSER_WIDTH-1):0]
PORT M_AXI_BVALID = BVALID, BUS = M_AXI, DIR = I
PORT M_AXI_BREADY = BREADY, BUS = M_AXI, DIR = O
PORT M_AXI_ARID = ARID, BUS = M_AXI, DIR = O, VEC = [(C_S_AXI_ID_WIDTH-1):0]
PORT M_AXI_ARADDR = ARADDR, BUS = M_AXI, DIR = O, VEC = [(C_S_AXI_ADDR_WIDTH-1):0]
PORT M_AXI_ARLEN = ARLEN, BUS = M_AXI, DIR = O, VEC = [(8-1):0]
PORT M_AXI_ARSIZE = ARSIZE, BUS = M_AXI, DIR = O, VEC = [(3-1):0]
PORT M_AXI_ARBURST = ARBURST, BUS = M_AXI, DIR = O, VEC = [(2-1):0]
PORT M_AXI_ARLOCK = ARLOCK, BUS = M_AXI, DIR = O, VEC = [(2-1):0]
PORT M_AXI_ARCACHE = ARCACHE, BUS = M_AXI, DIR = O, VEC = [(4-1):0]
PORT M_AXI_ARPROT = ARPROT, BUS = M_AXI, DIR = O, VEC = [(3-1):0]
PORT M_AXI_ARREGION = ARREGION, BUS = M_AXI, DIR = O, VEC = [(4-1):0]
PORT M_AXI_ARQOS = ARQOS, BUS = M_AXI, DIR = O, VEC = [(4-1):0]
PORT M_AXI_ARUSER = ARUSER, BUS = M_AXI, DIR = O, VEC = [(C_S_AXI_ARUSER_WIDTH-1):0]
PORT M_AXI_ARVALID = ARVALID, BUS = M_AXI, DIR = O
PORT M_AXI_ARREADY = ARREADY, BUS = M_AXI, DIR = I
PORT M_AXI_RID = RID, BUS = M_AXI, DIR = I, VEC = [(C_S_AXI_ID_WIDTH-1):0]
PORT M_AXI_RDATA = RDATA, BUS = M_AXI, DIR = I, VEC = [(C_S_AXI_DATA_WIDTH-1):0]
PORT M_AXI_RRESP = RRESP, BUS = M_AXI, DIR = I, VEC = [(2-1):0]
PORT M_AXI_RLAST = RLAST, BUS = M_AXI, DIR = I
PORT M_AXI_RUSER = RUSER, BUS = M_AXI, DIR = I, VEC = [(C_S_AXI_RUSER_WIDTH-1):0]
PORT M_AXI_RVALID = RVALID, BUS = M_AXI, DIR = I
PORT M_AXI_RREADY = RREADY, BUS = M_AXI, DIR = O

END
