###########################################################################
#
# Copyright (C) 2012-2017 VectorBlox Computing, Inc.
#
###########################################################################

BEGIN vci_sqrt

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
# OPTION STYLE = HDL
# MIXED HDL with coregen divider NGC netlist
OPTION STYLE = MIX
OPTION IP_GROUP = VectorBlox
OPTION DESC = VectorBlox Square Root VCI
OPTION LONG_DESC = "VectorBlox Custom Instruction: Sqrt(A)"
OPTION ARCH_SUPPORT_MAP = (spartan6=PREFERRED, virtex6lx=PREFERRED, zynq=PREFERRED, others=EARLY_ACCESS)

OPTION IPLEVEL_DRC_PROC = iplevel_drc
OPTION SYSLEVEL_DRC_PROC = syslevel_drc
OPTION SYSLEVEL_UPDATE_PROC = syslevel_update
OPTION PLATGEN_SYSLEVEL_UPDATE_PROC = platgen_syslevel_update

## Bus Interfaces
BUS_INTERFACE BUS = S_VCI, BUS_STD = VBX_VCI, BUS_TYPE = TARGET

PARAMETER VCI_LANES = 1, DT = INTEGER, RANGE=(1:256), ASSIGNMENT = OPTIONAL
# Have to be constants because of fixed coregen CORDIC square root netlist.
PARAMETER FXP_BITS = 16, DT = INTEGER, RANGE=(0:31), ASSIGNMENT = CONSTANT
PARAMETER PIPELINE_STAGES = 25, DT = INTEGER, ASSIGNMENT = CONSTANT
PARAMETER LATENCY_MODE = 1, DT = INTEGER, RANGE=(0:1), ASSIGNMENT = CONSTANT

## Ports
###########################################################################
PORT vci_clk = VCI_CLK, DIR = I, SIGIS = CLK, BUS = S_VCI
PORT vci_reset = VCI_RESET, DIR = I, SIGIS = RST, BUS = S_VCI
PORT vci_valid = VCI_VALID, DIR = I, BUS = S_VCI
PORT vci_signed = VCI_SIGNED, DIR = I, BUS = S_VCI
PORT vci_opsize = VCI_OPSIZE, DIR = I, VEC = [1:0], BUS = S_VCI
PORT vci_vector_start = VCI_VECTOR_START, DIR = I, BUS = S_VCI
PORT vci_vector_end = VCI_VECTOR_END, DIR = I, BUS = S_VCI
PORT vci_byte_valid = VCI_BYTE_VALID, DIR = I, VEC = [(VCI_LANES*4-1):0], BUS = S_VCI
PORT vci_data_a = VCI_DATA_A, DIR = I, VEC = [(VCI_LANES*32-1):0], BUS = S_VCI
PORT vci_flag_a = VCI_FLAG_A, DIR = I, VEC = [(VCI_LANES*4-1):0], BUS = S_VCI
PORT vci_data_b = VCI_DATA_B, DIR = I, VEC = [(VCI_LANES*32-1):0], BUS = S_VCI
PORT vci_flag_b = VCI_FLAG_B, DIR = I, VEC = [(VCI_LANES*4-1):0], BUS = S_VCI
PORT vci_data_out = VCI_DATA_OUT, DIR = O, VEC = [(VCI_LANES*32-1):0], BUS = S_VCI
PORT vci_flag_out = VCI_FLAG_OUT, DIR = O, VEC = [(VCI_LANES*4-1):0], BUS = S_VCI
PORT vci_byteenable = VCI_BYTEENABLE, DIR = O, VEC = [(VCI_LANES*4-1):0], BUS = S_VCI
###########################################################################

END
