###########################################################################
#
# Copyright (C) 2012-2015 VectorBlox Computing, Inc.
#
###########################################################################

BEGIN vectorblox_mxp

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION STYLE = HDL
OPTION IP_GROUP = VectorBlox
OPTION DESC = VectorBlox MXP
OPTION LONG_DESC = "VectorBlox MXP"
OPTION ARCH_SUPPORT_MAP = (spartan6=PREFERRED, virtex6lx=PREFERRED, zynq=PREFERRED, others=EARLY_ACCESS)

OPTION CLK_FREQ_RATIOS = (core_clk_2x/core_clk = (2/1), vci_0_clk/core_clk = (1/1), vci_1_clk/core_clk = (1/1), vci_2_clk/core_clk = (1/1), vci_3_clk/core_clk = (1/1), vci_4_clk/core_clk = (1/1), vci_5_clk/core_clk = (1/1), vci_6_clk/core_clk = (1/1), vci_7_clk/core_clk = (1/1), vci_8_clk/core_clk = (1/1), vci_9_clk/core_clk = (1/1), vci_10_clk/core_clk = (1/1), vci_11_clk/core_clk = (1/1), vci_12_clk/core_clk = (1/1), vci_13_clk/core_clk = (1/1), vci_14_clk/core_clk = (1/1), vci_15_clk/core_clk = (1/1))

OPTION IPLEVEL_DRC_PROC = iplevel_drc
OPTION SYSLEVEL_DRC_PROC = syslevel_drc
OPTION SYSLEVEL_UPDATE_PROC = syslevel_update
OPTION PLATGEN_SYSLEVEL_UPDATE_PROC = platgen_syslevel_update

## Bus Interfaces
BUS_INTERFACE BUS = M_AXI, BUS_STD = AXI, BUS_TYPE = MASTER
BUS_INTERFACE BUS = S_AXI, BUS_STD = AXI, BUS_TYPE = SLAVE

BUS_INTERFACE BUS = FSL_SINK, BUS_STD = XIL_DWFSL, BUS_TYPE = TARGET, ISVALID = (C_INSTR_PORT_TYPE == 0)
BUS_INTERFACE BUS = FSL_SRC, BUS_STD = XIL_DRFSL, BUS_TYPE = INITIATOR, ISVALID = (C_INSTR_PORT_TYPE == 0)

BUS_INTERFACE BUS = S_AXIS_INSTR, BUS_STD = AXIS, BUS_TYPE = TARGET, ISVALID = (C_INSTR_PORT_TYPE == 1)
BUS_INTERFACE BUS = M_AXIS_INSTR, BUS_STD = AXIS, BUS_TYPE = INITIATOR, ISVALID = (C_INSTR_PORT_TYPE == 1)

BUS_INTERFACE BUS = S_AXI_INSTR, BUS_STD = AXI, BUS_TYPE = SLAVE, ISVALID = (C_INSTR_PORT_TYPE == 2)

BUS_INTERFACE BUS = M_VCI0, BUS_STD = VBX_VCI, BUS_TYPE = INITIATOR, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 0)
BUS_INTERFACE BUS = M_VCI1, BUS_STD = VBX_VCI, BUS_TYPE = INITIATOR, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 1)
BUS_INTERFACE BUS = M_VCI2, BUS_STD = VBX_VCI, BUS_TYPE = INITIATOR, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 2)
BUS_INTERFACE BUS = M_VCI3, BUS_STD = VBX_VCI, BUS_TYPE = INITIATOR, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 3)
BUS_INTERFACE BUS = M_VCI4, BUS_STD = VBX_VCI, BUS_TYPE = INITIATOR, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 4)
BUS_INTERFACE BUS = M_VCI5, BUS_STD = VBX_VCI, BUS_TYPE = INITIATOR, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 5)
BUS_INTERFACE BUS = M_VCI6, BUS_STD = VBX_VCI, BUS_TYPE = INITIATOR, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 6)
BUS_INTERFACE BUS = M_VCI7, BUS_STD = VBX_VCI, BUS_TYPE = INITIATOR, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 7)
BUS_INTERFACE BUS = M_VCI8, BUS_STD = VBX_VCI, BUS_TYPE = INITIATOR, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 8)
BUS_INTERFACE BUS = M_VCI9, BUS_STD = VBX_VCI, BUS_TYPE = INITIATOR, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 9)
BUS_INTERFACE BUS = M_VCI10, BUS_STD = VBX_VCI, BUS_TYPE = INITIATOR, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 10)
BUS_INTERFACE BUS = M_VCI11, BUS_STD = VBX_VCI, BUS_TYPE = INITIATOR, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 11)
BUS_INTERFACE BUS = M_VCI12, BUS_STD = VBX_VCI, BUS_TYPE = INITIATOR, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 12)
BUS_INTERFACE BUS = M_VCI13, BUS_STD = VBX_VCI, BUS_TYPE = INITIATOR, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 13)
BUS_INTERFACE BUS = M_VCI14, BUS_STD = VBX_VCI, BUS_TYPE = INITIATOR, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 14)
BUS_INTERFACE BUS = M_VCI15, BUS_STD = VBX_VCI, BUS_TYPE = INITIATOR, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 15)

PARAMETER VECTOR_LANES = 1, DT = INTEGER, RANGE = (1,2,4,8,16,32,64,128,256), ASSIGNMENT = OPTIONAL
PARAMETER MEMORY_WIDTH_LANES = 1, DT = INTEGER, RANGE = (1,2,4,8,16,32), ASSIGNMENT = OPTIONAL, TYPE = NON_HDL
PARAMETER SCRATCHPAD_KB = 64, DT = INTEGER, RANGE = (4,8,16,32,64,128,256,512,1024), ASSIGNMENT = OPTIONAL
# For AXI3, must restrict to max of 16 beats.
# Note: for connection to Zynq PS ACP, want to restrict to max of 4.
PARAMETER BEATS_PER_BURST = 16, DT = INTEGER, RANGE = (1,2,4,8,16,32,64,128,256), ASSIGNMENT = OPTIONAL, TYPE = NON_HDL

PARAMETER MAX_MASKED_WAVES = 128, DT = INTEGER, RANGE = (128,256,512,1024), ASSIGNMENT = OPTIONAL
PARAMETER MASK_PARTITIONS = 1, DT = INTEGER, RANGE = (0,1), ASSIGNMENT = OPTIONAL

# Derived parameter set to BEATS_PER_BURST*(C_M_AXI_DATA_WIDTH/8).
PARAMETER BURSTLENGTH_BYTES = 64, DT = INTEGER, ASSIGNMENT = UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_burstlength_bytes

PARAMETER MIN_MULTIPLIER_HW = 0, DT = INTEGER, RANGE=(0:2), VALUES = (0=Byte, 1=Halfword, 2=Word), ASSIGNMENT = OPTIONAL
PARAMETER MULFXP_WORD_FRACTION_BITS = 16, DT = INTEGER, RANGE = (1:31), ASSIGNMENT = OPTIONAL
PARAMETER MULFXP_HALF_FRACTION_BITS = 15, DT = INTEGER, RANGE = (1:15), ASSIGNMENT = OPTIONAL
PARAMETER MULFXP_BYTE_FRACTION_BITS = 4, DT = INTEGER, RANGE = (1:7), ASSIGNMENT = OPTIONAL

PARAMETER MULFXP_WORD_FORMAT = "Q16.16", DT = STRING, ASSIGNMENT = UPDATE, TYPE = NON_HDL, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mulfxp_word_format
PARAMETER MULFXP_HALF_FORMAT = "Q1.15", DT = STRING, ASSIGNMENT = UPDATE, TYPE = NON_HDL, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mulfxp_half_format
PARAMETER MULFXP_BYTE_FORMAT = "Q4.4", DT = STRING, ASSIGNMENT = UPDATE, TYPE = NON_HDL, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_mulfxp_byte_format

PARAMETER VECTOR_CUSTOM_INSTRUCTIONS = 0, DT = INTEGER, RANGE=(0:16)

PARAMETER VCI_0_LANES = 1, DT = INTEGER, RANGE=(1:256), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 0)
PARAMETER VCI_0_OPCODE_START = 0, DT = INTEGER, RANGE=(0:15), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 0)
PARAMETER VCI_0_FUNCTIONS = 1, DT = INTEGER, RANGE=(1:16), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 0)
PARAMETER VCI_0_MODIFIES_DEST_ADDR = 0, DT = INTEGER, RANGE=(0,1), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 0)
PARAMETER VCI_1_LANES = 1, DT = INTEGER, RANGE=(1:256), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 1)
PARAMETER VCI_1_OPCODE_START = 1, DT = INTEGER, RANGE=(0:15), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 1)
PARAMETER VCI_1_FUNCTIONS = 1, DT = INTEGER, RANGE=(1:16), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 1)
PARAMETER VCI_1_MODIFIES_DEST_ADDR = 0, DT = INTEGER, RANGE=(0,1), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 1)
PARAMETER VCI_2_LANES = 1, DT = INTEGER, RANGE=(1:256), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 2)
PARAMETER VCI_2_OPCODE_START = 2, DT = INTEGER, RANGE=(0:15), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 2)
PARAMETER VCI_2_FUNCTIONS = 1, DT = INTEGER, RANGE=(1:16), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 2)
PARAMETER VCI_2_MODIFIES_DEST_ADDR = 0, DT = INTEGER, RANGE=(0,1), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 2)
PARAMETER VCI_3_LANES = 1, DT = INTEGER, RANGE=(1:256), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 3)
PARAMETER VCI_3_OPCODE_START = 3, DT = INTEGER, RANGE=(0:15), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 3)
PARAMETER VCI_3_FUNCTIONS = 1, DT = INTEGER, RANGE=(1:16), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 3)
PARAMETER VCI_3_MODIFIES_DEST_ADDR = 0, DT = INTEGER, RANGE=(0,1), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 3)
PARAMETER VCI_4_LANES = 1, DT = INTEGER, RANGE=(1:256), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 4)
PARAMETER VCI_4_OPCODE_START = 4, DT = INTEGER, RANGE=(0:15), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 4)
PARAMETER VCI_4_FUNCTIONS = 1, DT = INTEGER, RANGE=(1:16), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 4)
PARAMETER VCI_4_MODIFIES_DEST_ADDR = 0, DT = INTEGER, RANGE=(0,1), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 4)
PARAMETER VCI_5_LANES = 1, DT = INTEGER, RANGE=(1:256), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 5)
PARAMETER VCI_5_OPCODE_START = 5, DT = INTEGER, RANGE=(0:15), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 5)
PARAMETER VCI_5_FUNCTIONS = 1, DT = INTEGER, RANGE=(1:16), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 5)
PARAMETER VCI_5_MODIFIES_DEST_ADDR = 0, DT = INTEGER, RANGE=(0,1), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 5)
PARAMETER VCI_6_LANES = 1, DT = INTEGER, RANGE=(1:256), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 6)
PARAMETER VCI_6_OPCODE_START = 6, DT = INTEGER, RANGE=(0:15), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 6)
PARAMETER VCI_6_FUNCTIONS = 1, DT = INTEGER, RANGE=(1:16), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 6)
PARAMETER VCI_6_MODIFIES_DEST_ADDR = 0, DT = INTEGER, RANGE=(0,1), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 6)
PARAMETER VCI_7_LANES = 1, DT = INTEGER, RANGE=(1:256), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 7)
PARAMETER VCI_7_OPCODE_START = 7, DT = INTEGER, RANGE=(0:15), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 7)
PARAMETER VCI_7_FUNCTIONS = 1, DT = INTEGER, RANGE=(1:16), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 7)
PARAMETER VCI_7_MODIFIES_DEST_ADDR = 0, DT = INTEGER, RANGE=(0,1), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 7)
PARAMETER VCI_8_LANES = 1, DT = INTEGER, RANGE=(1:256), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 8)
PARAMETER VCI_8_OPCODE_START = 8, DT = INTEGER, RANGE=(0:15), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 8)
PARAMETER VCI_8_FUNCTIONS = 1, DT = INTEGER, RANGE=(1:16), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 8)
PARAMETER VCI_8_MODIFIES_DEST_ADDR = 0, DT = INTEGER, RANGE=(0,1), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 8)
PARAMETER VCI_9_LANES = 1, DT = INTEGER, RANGE=(1:256), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 9)
PARAMETER VCI_9_OPCODE_START = 9, DT = INTEGER, RANGE=(0:15), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 9)
PARAMETER VCI_9_FUNCTIONS = 1, DT = INTEGER, RANGE=(1:16), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 9)
PARAMETER VCI_9_MODIFIES_DEST_ADDR = 0, DT = INTEGER, RANGE=(0,1), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 9)
PARAMETER VCI_10_LANES = 1, DT = INTEGER, RANGE=(1:256), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 10)
PARAMETER VCI_10_OPCODE_START = 10, DT = INTEGER, RANGE=(0:15), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 10)
PARAMETER VCI_10_FUNCTIONS = 1, DT = INTEGER, RANGE=(1:16), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 10)
PARAMETER VCI_10_MODIFIES_DEST_ADDR = 0, DT = INTEGER, RANGE=(0,1), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 10)
PARAMETER VCI_11_LANES = 1, DT = INTEGER, RANGE=(1:256), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 11)
PARAMETER VCI_11_OPCODE_START = 11, DT = INTEGER, RANGE=(0:15), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 11)
PARAMETER VCI_11_FUNCTIONS = 1, DT = INTEGER, RANGE=(1:16), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 11)
PARAMETER VCI_11_MODIFIES_DEST_ADDR = 0, DT = INTEGER, RANGE=(0,1), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 11)
PARAMETER VCI_12_LANES = 1, DT = INTEGER, RANGE=(1:256), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 12)
PARAMETER VCI_12_OPCODE_START = 12, DT = INTEGER, RANGE=(0:15), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 12)
PARAMETER VCI_12_FUNCTIONS = 1, DT = INTEGER, RANGE=(1:16), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 12)
PARAMETER VCI_12_MODIFIES_DEST_ADDR = 0, DT = INTEGER, RANGE=(0,1), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 12)
PARAMETER VCI_13_LANES = 1, DT = INTEGER, RANGE=(1:256), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 13)
PARAMETER VCI_13_OPCODE_START = 13, DT = INTEGER, RANGE=(0:15), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 13)
PARAMETER VCI_13_FUNCTIONS = 1, DT = INTEGER, RANGE=(1:16), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 13)
PARAMETER VCI_13_MODIFIES_DEST_ADDR = 0, DT = INTEGER, RANGE=(0,1), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 13)
PARAMETER VCI_14_LANES = 1, DT = INTEGER, RANGE=(1:256), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 14)
PARAMETER VCI_14_OPCODE_START = 14, DT = INTEGER, RANGE=(0:15), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 14)
PARAMETER VCI_14_FUNCTIONS = 1, DT = INTEGER, RANGE=(1:16), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 14)
PARAMETER VCI_14_MODIFIES_DEST_ADDR = 0, DT = INTEGER, RANGE=(0,1), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 14)
PARAMETER VCI_15_LANES = 1, DT = INTEGER, RANGE=(1:256), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 15)
PARAMETER VCI_15_OPCODE_START = 15, DT = INTEGER, RANGE=(0:15), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 15)
PARAMETER VCI_15_FUNCTIONS = 1, DT = INTEGER, RANGE=(1:16), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 15)
PARAMETER VCI_15_MODIFIES_DEST_ADDR = 0, DT = INTEGER, RANGE=(0,1), ASSIGNMENT = OPTIONAL, ISVALID = (VECTOR_CUSTOM_INSTRUCTIONS > 15)

PARAMETER VCUSTOM0_DEPTH = 0, DT = INTEGER, RANGE = (0:256), ASSIGNMENT = OPTIONAL
PARAMETER VCUSTOM1_DEPTH = 0, DT = INTEGER, RANGE = (0:256), ASSIGNMENT = OPTIONAL
PARAMETER VCUSTOM2_DEPTH = 0, DT = INTEGER, RANGE = (0:256), ASSIGNMENT = OPTIONAL
PARAMETER VCUSTOM3_DEPTH = 0, DT = INTEGER, RANGE = (0:256), ASSIGNMENT = OPTIONAL
PARAMETER VCUSTOM4_DEPTH = 0, DT = INTEGER, RANGE = (0:256), ASSIGNMENT = OPTIONAL
PARAMETER VCUSTOM5_DEPTH = 0, DT = INTEGER, RANGE = (0:256), ASSIGNMENT = OPTIONAL
PARAMETER VCUSTOM6_DEPTH = 0, DT = INTEGER, RANGE = (0:256), ASSIGNMENT = OPTIONAL
PARAMETER VCUSTOM7_DEPTH = 0, DT = INTEGER, RANGE = (0:256), ASSIGNMENT = OPTIONAL
PARAMETER VCUSTOM8_DEPTH = 0, DT = INTEGER, RANGE = (0:256), ASSIGNMENT = OPTIONAL
PARAMETER VCUSTOM9_DEPTH = 0, DT = INTEGER, RANGE = (0:256), ASSIGNMENT = OPTIONAL
PARAMETER VCUSTOM10_DEPTH = 0, DT = INTEGER, RANGE = (0:256), ASSIGNMENT = OPTIONAL
PARAMETER VCUSTOM11_DEPTH = 0, DT = INTEGER, RANGE = (0:256), ASSIGNMENT = OPTIONAL
PARAMETER VCUSTOM12_DEPTH = 0, DT = INTEGER, RANGE = (0:256), ASSIGNMENT = OPTIONAL
PARAMETER VCUSTOM13_DEPTH = 0, DT = INTEGER, RANGE = (0:256), ASSIGNMENT = OPTIONAL
PARAMETER VCUSTOM14_DEPTH = 0, DT = INTEGER, RANGE = (0:256), ASSIGNMENT = OPTIONAL
PARAMETER VCUSTOM15_DEPTH = 0, DT = INTEGER, RANGE = (0:256), ASSIGNMENT = OPTIONAL

PARAMETER C_INSTR_PORT_TYPE = 0, DT = INTEGER, RANGE=(0:2), VALUES = (0=Direct FSL, 1=AXI4-Stream, 2=Memory-Mapped AXI4), ASSIGNMENT = OPTIONAL

###########################################################################
PARAMETER C_M_AXI_ADDR_WIDTH = 32, DT = INTEGER, BUS = M_AXI, ASSIGNMENT = CONSTANT
# Derived parameter set to MEMORY_WIDTH_LANES*32.
PARAMETER C_M_AXI_DATA_WIDTH = 32, DT = INTEGER, BUS = M_AXI, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_c_m_axi_data_width
# If DMA engine is connected to Zynq PS S_AXI_HPx or S_AXI_ACP interface,
# setting protocol to AXI3 instead of AXI4 prevents insertion of AXI4-to-AXI3
# converter logic on axi_interconnect interface to Zynq PS.
PARAMETER C_M_AXI_PROTOCOL = AXI4, DT = STRING, BUS = M_AXI, VALUES = (AXI4=AXI4, AXI3=AXI3), ASSIGNMENT = OPTIONAL, TYPE = NON_HDL
PARAMETER C_M_AXI_LEN_WIDTH = 8, DT = INTEGER, BUS = M_AXI, ASSIGNMENT = UPDATE, IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_c_m_axi_len_width
# ARUSER/AWUSER needed for connection to ACP, but Zynq PS7 can drive these ports to
# a constant value internally.
# PARAMETER C_M_AXI_SUPPORTS_USER_SIGNALS = 1, DT = INTEGER, BUS = M_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
# PARAMETER C_M_AXI_ARUSER_WIDTH = 5, DT = INTEGER, BUS = M_AXI, ASSIGNMENT = CONSTANT
# PARAMETER C_M_AXI_AWUSER_WIDTH = 5, DT = INTEGER, BUS = M_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_M_AXI_SUPPORTS_NARROW_BURST = 0, DT = INTEGER, BUS = M_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_M_AXI_SUPPORTS_READ = 1, DT = STRING, BUS = M_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_M_AXI_SUPPORTS_WRITE = 1, DT = STRING, BUS = M_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_M_AXI_SUPPORTS_THREADS = 0, DT = INTEGER, BUS = M_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_INTERCONNECT_M_AXI_READ_ISSUING = 8, DT = integer, RANGE = (1, 2, 4, 8), BUS = M_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_INTERCONNECT_M_AXI_WRITE_ISSUING = 8, DT = integer, RANGE = (1, 2, 4, 8), BUS = M_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL

###########################################################################
PARAMETER C_S_AXI_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_DATA_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_PROTOCOL = AXI4LITE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, DT = STRING, BUS = S_AXI
PARAMETER C_S_AXI_SUPPORTS_READ = 1, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_S_AXI_SUPPORTS_WRITE = 1, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL

PARAMETER C_S_AXI_BASEADDR = 0xffffffff, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_HIGHADDR, ADDRESS = BASE, BUS = S_AXI, MIN_SIZE = 0x1000, ADDR_TYPE = MEMORY, TYPE = NON_HDL
PARAMETER C_S_AXI_HIGHADDR = 0x00000000, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_BASEADDR, ADDRESS = HIGH, BUS = S_AXI, TYPE = NON_HDL

###########################################################################
# NOTE: AXI4 slave is preferable to AXI3 slave to avoid an AXI3 converter in
# axi_interconnect's MI slot (if the MI slot is accessible by any AXI4
# masters).
PARAMETER C_S_AXI_INSTR_PROTOCOL = AXI4, DT = STRING, BUS = S_AXI_INSTR, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_INSTR_PORT_TYPE == 2)
PARAMETER C_S_AXI_INSTR_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI_INSTR, ASSIGNMENT = CONSTANT, ISVALID = (C_INSTR_PORT_TYPE == 2)
PARAMETER C_S_AXI_INSTR_DATA_WIDTH = 32, DT = INTEGER, BUS = S_AXI_INSTR, ASSIGNMENT = CONSTANT, ISVALID = (C_INSTR_PORT_TYPE == 2)
PARAMETER C_S_AXI_INSTR_ID_WIDTH = 4, DT = INTEGER, BUS = S_AXI_INSTR, ASSIGNMENT = UPDATE, ISVALID = (C_INSTR_PORT_TYPE == 2)
PARAMETER C_S_AXI_INSTR_SUPPORTS_READ = 1, DT = INTEGER, BUS = S_AXI_INSTR, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_INSTR_PORT_TYPE == 2)
PARAMETER C_S_AXI_INSTR_SUPPORTS_WRITE = 1, DT = INTEGER, BUS = S_AXI_INSTR, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, ISVALID = (C_INSTR_PORT_TYPE == 2)

PARAMETER C_S_AXI_INSTR_BASEADDR = 0xffffffff, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_INSTR_HIGHADDR, ADDRESS = BASE, BUS = S_AXI_INSTR, MIN_SIZE = 0x1000, ADDR_TYPE = MEMORY, TYPE = NON_HDL, ISVALID = (C_INSTR_PORT_TYPE == 2)
PARAMETER C_S_AXI_INSTR_HIGHADDR = 0x00000000, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_INSTR_BASEADDR, ADDRESS = HIGH, BUS = S_AXI_INSTR, TYPE = NON_HDL, ISVALID = (C_INSTR_PORT_TYPE == 2)

###########################################################################
## Ports
###########################################################################

PORT core_clk = "", DIR = I, SIGIS = CLK, BUS=M_AXI:S_AXI:M_AXIS_INSTR:S_AXIS_INSTR:S_AXI_INSTR
PORT core_clk_2x = "", DIR = I, SIGIS = CLK
PORT aresetn = ARESETN, DIR = I, SIGIS = RST, BUS=M_AXI:S_AXI:S_AXI_INSTR

###########################################################################
PORT m_axi_arready = ARREADY, DIR = I, BUS = M_AXI
PORT m_axi_arvalid = ARVALID, DIR = O, BUS = M_AXI
PORT m_axi_araddr = ARADDR, DIR = O, VEC = [(C_M_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI
# 4 bits for AXI3, 8 bits for AXI4
PORT m_axi_arlen = ARLEN, DIR = O, VEC = [(C_M_AXI_LEN_WIDTH-1):0], BUS = M_AXI
PORT m_axi_arsize = ARSIZE, DIR = O, VEC = [2:0], BUS = M_AXI
PORT m_axi_arburst = ARBURST, DIR = O, VEC = [1:0], BUS = M_AXI
PORT m_axi_arprot = ARPROT, DIR = O, VEC = [2:0], BUS = M_AXI
PORT m_axi_arcache = ARCACHE, DIR = O, VEC = [3:0], BUS = M_AXI
# NOTE: If PS7 C_USE_DEFAULT_ACP_USER_VAL=1 (default is 0), then PS7's ACP
# ARUSER[4:0] port is set to C_S_AXI_ACP_ARUSER_VAL (default is 31)
# and driving ARUSER[0] to 1 on the ACP port is not necesary.
# PORT m_axi_aruser = ARUSER, DIR = O, VEC = [(C_M_AXI_ARUSER_WIDTH-1):0], BUS = M_AXI
PORT m_axi_rready = RREADY, DIR = O, BUS = M_AXI
PORT m_axi_rvalid = RVALID, DIR = I, BUS = M_AXI
PORT m_axi_rdata = RDATA, DIR = I, VEC = [(C_M_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI
PORT m_axi_rresp = RRESP, DIR = I, VEC = [1:0], BUS = M_AXI
PORT m_axi_rlast = RLAST, DIR = I, BUS = M_AXI
PORT m_axi_awready = AWREADY, DIR = I, BUS = M_AXI
PORT m_axi_awvalid = AWVALID, DIR = O, BUS = M_AXI
PORT m_axi_awaddr = AWADDR, DIR = O, VEC = [(C_M_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI
# 4 bits for AXI3, 8 bits for AXI4
PORT m_axi_awlen = AWLEN, DIR = O, VEC = [(C_M_AXI_LEN_WIDTH-1):0], BUS = M_AXI
PORT m_axi_awsize = AWSIZE, DIR = O, VEC = [2:0], BUS = M_AXI
PORT m_axi_awburst = AWBURST, DIR = O, VEC = [1:0], BUS = M_AXI
PORT m_axi_awprot = AWPROT, DIR = O, VEC = [2:0], BUS = M_AXI
PORT m_axi_awcache = AWCACHE, DIR = O, VEC = [3:0], BUS = M_AXI
# NOTE: If PS7 C_USE_DEFAULT_ACP_USER_VAL=1 (default is 0), then PS7's ACP
# AWUSER[4:0] port is set to C_S_AXI_ACP_AWUSER_VAL (default is 31)
# and driving AWUSER[0] to 1 on the ACP port is not necesary.
# PORT m_axi_awuser = AWUSER, DIR = O, VEC = [(C_M_AXI_AWUSER_WIDTH-1):0], BUS = M_AXI
PORT m_axi_wready = WREADY, DIR = I, BUS = M_AXI
PORT m_axi_wvalid = WVALID, DIR = O, BUS = M_AXI
PORT m_axi_wdata = WDATA, DIR = O, VEC = [(C_M_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = M_AXI
PORT m_axi_wstrb = WSTRB, DIR = O, VEC = [((C_M_AXI_DATA_WIDTH/8)-1):0], ENDIAN = LITTLE, BUS = M_AXI
PORT m_axi_wlast = WLAST, DIR = O, BUS = M_AXI
PORT m_axi_bready = BREADY, DIR = O, BUS = M_AXI
PORT m_axi_bvalid = BVALID, DIR = I, BUS = M_AXI
PORT m_axi_bresp = BRESP, DIR = I, VEC = [1:0], BUS = M_AXI

###########################################################################
PORT s_axi_awaddr = AWADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT s_axi_awvalid = AWVALID, DIR = I, BUS = S_AXI
PORT s_axi_wdata = WDATA, DIR = I, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT s_axi_wstrb = WSTRB, DIR = I, VEC = [((C_S_AXI_DATA_WIDTH/8)-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT s_axi_wvalid = WVALID, DIR = I, BUS = S_AXI
PORT s_axi_bready = BREADY, DIR = I, BUS = S_AXI
PORT s_axi_araddr = ARADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT s_axi_arvalid = ARVALID, DIR = I, BUS = S_AXI
PORT s_axi_rready = RREADY, DIR = I, BUS = S_AXI
PORT s_axi_arready = ARREADY, DIR = O, BUS = S_AXI
PORT s_axi_rdata = RDATA, DIR = O, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT s_axi_rresp = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT s_axi_rvalid = RVALID, DIR = O, BUS = S_AXI
PORT s_axi_wready = WREADY, DIR = O, BUS = S_AXI
PORT s_axi_bresp = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT s_axi_bvalid = BVALID, DIR = O, BUS = S_AXI
PORT s_axi_awready = AWREADY, DIR = O, BUS = S_AXI

###########################################################################
PORT FSL_Clk = "", DIR=I, SIGIS=CLK, BUS=FSL_SINK:FSL_SRC, ISVALID = (C_INSTR_PORT_TYPE == 0)

PORT FSL_S_Read = FSL_S_Read, DIR=I, BUS=FSL_SRC
PORT FSL_S_Data = FSL_S_Data, DIR=O, VEC=[0:31], BUS=FSL_SRC
PORT FSL_S_Exists = FSL_S_Exists, DIR=O, BUS=FSL_SRC

PORT FSL_M_Write = FSL_M_Write, DIR=I, BUS=FSL_SINK
PORT FSL_M_Data = FSL_M_Data, DIR=I, VEC=[0:31], BUS=FSL_SINK
PORT FSL_M_Full = FSL_M_Full, DIR=O, BUS=FSL_SINK

###########################################################################
PORT m_axis_instr_tlast = TLAST, BUS = M_AXIS_INSTR, DIR = O
PORT m_axis_instr_tdata = TDATA, BUS = M_AXIS_INSTR, DIR = O, VEC = [31:0]
PORT m_axis_instr_tvalid = TVALID, BUS = M_AXIS_INSTR, DIR = O
PORT m_axis_instr_tready = TREADY, BUS = M_AXIS_INSTR, DIR = I

PORT s_axis_instr_tlast = TLAST, BUS = S_AXIS_INSTR, DIR = I
PORT s_axis_instr_tdata = TDATA, BUS = S_AXIS_INSTR, DIR = I, VEC = [31:0]
PORT s_axis_instr_tvalid = TVALID, BUS = S_AXIS_INSTR, DIR = I
PORT s_axis_instr_tready = TREADY, BUS = S_AXIS_INSTR, DIR = O

###########################################################################
PORT s_axi_instr_awaddr = AWADDR, DIR = I, VEC = [(C_S_AXI_INSTR_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI_INSTR
PORT s_axi_instr_awvalid = AWVALID, DIR = I, BUS = S_AXI_INSTR
PORT s_axi_instr_awready = AWREADY, DIR = O, BUS = S_AXI_INSTR

PORT s_axi_instr_awid = AWID, DIR = I, VEC = [(C_S_AXI_INSTR_ID_WIDTH-1):0], BUS = S_AXI_INSTR
PORT s_axi_instr_awlen = AWLEN, DIR = I, VEC = [7:0], BUS = S_AXI_INSTR
PORT s_axi_instr_awsize = AWSIZE, DIR = I, VEC = [2:0], BUS = S_AXI_INSTR
PORT s_axi_instr_awburst = AWBURST, DIR = I, VEC = [1:0], BUS = S_AXI_INSTR
# PORT s_axi_instr_awprot = AWPROT, DIR = I, VEC = [2:0], BUS = S_AXI_INSTR
# PORT s_axi_instr_awcache = AWCACHE, DIR = I, VEC = [3:0], BUS = S_AXI_INSTR

PORT s_axi_instr_wdata = WDATA, DIR = I, VEC = [(C_S_AXI_INSTR_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI_INSTR
PORT s_axi_instr_wvalid = WVALID, DIR = I, BUS = S_AXI_INSTR
PORT s_axi_instr_wlast = WLAST, DIR = I, BUS = S_AXI_INSTR
PORT s_axi_instr_wready = WREADY, DIR = O, BUS = S_AXI_INSTR
PORT s_axi_instr_wstrb = WSTRB, DIR = I, VEC = [((C_S_AXI_INSTR_DATA_WIDTH/8)-1):0], ENDIAN = LITTLE, BUS = S_AXI_INSTR

PORT s_axi_instr_bresp = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI_INSTR
PORT s_axi_instr_bvalid = BVALID, DIR = O, BUS = S_AXI_INSTR
PORT s_axi_instr_bready = BREADY, DIR = I, BUS = S_AXI_INSTR
PORT s_axi_instr_bid = BID, DIR = O, VEC = [(C_S_AXI_INSTR_ID_WIDTH-1):0], BUS = S_AXI_INSTR

PORT s_axi_instr_araddr = ARADDR, DIR = I, VEC = [(C_S_AXI_INSTR_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI_INSTR
PORT s_axi_instr_arvalid = ARVALID, DIR = I, BUS = S_AXI_INSTR
PORT s_axi_instr_arready = ARREADY, DIR = O, BUS = S_AXI_INSTR

PORT s_axi_instr_arid = ARID, DIR = I, VEC = [(C_S_AXI_INSTR_ID_WIDTH-1):0], BUS = S_AXI_INSTR
PORT s_axi_instr_arlen = ARLEN, DIR = I, VEC = [7:0], BUS = S_AXI_INSTR
PORT s_axi_instr_arsize = ARSIZE, DIR = I, VEC = [2:0], BUS = S_AXI_INSTR
PORT s_axi_instr_arburst = ARBURST, DIR = I, VEC = [1:0], BUS = S_AXI_INSTR
# PORT s_axi_instr_arprot = ARPROT, DIR = I, VEC = [2:0], BUS = S_AXI_INSTR
# PORT s_axi_instr_arcache = ARCACHE, DIR = I, VEC = [3:0], BUS = S_AXI_INSTR

PORT s_axi_instr_rdata = RDATA, DIR = O, VEC = [(C_S_AXI_INSTR_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI_INSTR
PORT s_axi_instr_rresp = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI_INSTR
PORT s_axi_instr_rready = RREADY, DIR = I, BUS = S_AXI_INSTR
PORT s_axi_instr_rvalid = RVALID, DIR = O, BUS = S_AXI_INSTR
PORT s_axi_instr_rlast = RLAST, DIR = O, BUS = S_AXI_INSTR
PORT s_axi_instr_rid = RID, DIR = O, VEC = [(C_S_AXI_INSTR_ID_WIDTH-1):0], BUS = S_AXI_INSTR

###########################################################################
PORT vci_0_clk = VCI_CLK, DIR = O, SIGIS = CLK, CLK_INPORT = core_clk, BUS = M_VCI0
PORT vci_0_reset = VCI_RESET, DIR = O, SIGIS = RST, BUS = M_VCI0
PORT vci_0_valid = VCI_VALID, DIR = O, VEC = [(VCI_0_FUNCTIONS-1):0], BUS = M_VCI0
PORT vci_0_signed = VCI_SIGNED, DIR = O, BUS = M_VCI0
PORT vci_0_opsize = VCI_OPSIZE, DIR = O, VEC = [1:0], BUS = M_VCI0
PORT vci_0_vector_start = VCI_VECTOR_START, DIR = O, BUS = M_VCI0
PORT vci_0_vector_end = VCI_VECTOR_END, DIR = O, BUS = M_VCI0
PORT vci_0_byte_valid = VCI_BYTE_VALID, DIR = O, VEC = [(VCI_0_LANES*4-1):0], BUS = M_VCI0
PORT vci_0_data_a = VCI_DATA_A, DIR = O, VEC = [(VCI_0_LANES*32-1):0], BUS = M_VCI0
PORT vci_0_flag_a = VCI_FLAG_A, DIR = O, VEC = [(VCI_0_LANES*4-1):0], BUS = M_VCI0
PORT vci_0_data_b = VCI_DATA_B, DIR = O, VEC = [(VCI_0_LANES*32-1):0], BUS = M_VCI0
PORT vci_0_flag_b = VCI_FLAG_B, DIR = O, VEC = [(VCI_0_LANES*4-1):0], BUS = M_VCI0
PORT vci_0_data_out = VCI_DATA_OUT, DIR = I, VEC = [(VCI_0_LANES*32-1):0], BUS = M_VCI0
PORT vci_0_flag_out = VCI_FLAG_OUT, DIR = I, VEC = [(VCI_0_LANES*4-1):0], BUS = M_VCI0
PORT vci_0_byteenable = VCI_BYTEENABLE, DIR = I, VEC = [(VCI_0_LANES*4-1):0], BUS = M_VCI0
PORT vci_0_dest_addr_in = VCI_DEST_ADDR_IN, DIR = O, VEC = [31:0], BUS = M_VCI0
PORT vci_0_dest_addr_out = VCI_DEST_ADDR_OUT, DIR = I, VEC = [31:0], BUS = M_VCI0

PORT vci_1_clk = VCI_CLK, DIR = O, SIGIS = CLK, CLK_INPORT = core_clk, BUS = M_VCI1
PORT vci_1_reset = VCI_RESET, DIR = O, SIGIS = RST, BUS = M_VCI1
PORT vci_1_valid = VCI_VALID, DIR = O, VEC = [(VCI_1_FUNCTIONS-1):0], BUS = M_VCI1
PORT vci_1_signed = VCI_SIGNED, DIR = O, BUS = M_VCI1
PORT vci_1_opsize = VCI_OPSIZE, DIR = O, VEC = [1:0], BUS = M_VCI1
PORT vci_1_vector_start = VCI_VECTOR_START, DIR = O, BUS = M_VCI1
PORT vci_1_vector_end = VCI_VECTOR_END, DIR = O, BUS = M_VCI1
PORT vci_1_byte_valid = VCI_BYTE_VALID, DIR = O, VEC = [(VCI_1_LANES*4-1):0], BUS = M_VCI1
PORT vci_1_data_a = VCI_DATA_A, DIR = O, VEC = [(VCI_1_LANES*32-1):0], BUS = M_VCI1
PORT vci_1_flag_a = VCI_FLAG_A, DIR = O, VEC = [(VCI_1_LANES*4-1):0], BUS = M_VCI1
PORT vci_1_data_b = VCI_DATA_B, DIR = O, VEC = [(VCI_1_LANES*32-1):0], BUS = M_VCI1
PORT vci_1_flag_b = VCI_FLAG_B, DIR = O, VEC = [(VCI_1_LANES*4-1):0], BUS = M_VCI1
PORT vci_1_data_out = VCI_DATA_OUT, DIR = I, VEC = [(VCI_1_LANES*32-1):0], BUS = M_VCI1
PORT vci_1_flag_out = VCI_FLAG_OUT, DIR = I, VEC = [(VCI_1_LANES*4-1):0], BUS = M_VCI1
PORT vci_1_byteenable = VCI_BYTEENABLE, DIR = I, VEC = [(VCI_1_LANES*4-1):0], BUS = M_VCI1
PORT vci_1_dest_addr_in = VCI_DEST_ADDR_IN, DIR = O, VEC = [31:0], BUS = M_VCI1
PORT vci_1_dest_addr_out = VCI_DEST_ADDR_OUT, DIR = I, VEC = [31:0], BUS = M_VCI1

PORT vci_2_clk = VCI_CLK, DIR = O, SIGIS = CLK, CLK_INPORT = core_clk, BUS = M_VCI2
PORT vci_2_reset = VCI_RESET, DIR = O, SIGIS = RST, BUS = M_VCI2
PORT vci_2_valid = VCI_VALID, DIR = O, VEC = [(VCI_2_FUNCTIONS-1):0], BUS = M_VCI2
PORT vci_2_signed = VCI_SIGNED, DIR = O, BUS = M_VCI2
PORT vci_2_opsize = VCI_OPSIZE, DIR = O, VEC = [1:0], BUS = M_VCI2
PORT vci_2_vector_start = VCI_VECTOR_START, DIR = O, BUS = M_VCI2
PORT vci_2_vector_end = VCI_VECTOR_END, DIR = O, BUS = M_VCI2
PORT vci_2_byte_valid = VCI_BYTE_VALID, DIR = O, VEC = [(VCI_2_LANES*4-1):0], BUS = M_VCI2
PORT vci_2_data_a = VCI_DATA_A, DIR = O, VEC = [(VCI_2_LANES*32-1):0], BUS = M_VCI2
PORT vci_2_flag_a = VCI_FLAG_A, DIR = O, VEC = [(VCI_2_LANES*4-1):0], BUS = M_VCI2
PORT vci_2_data_b = VCI_DATA_B, DIR = O, VEC = [(VCI_2_LANES*32-1):0], BUS = M_VCI2
PORT vci_2_flag_b = VCI_FLAG_B, DIR = O, VEC = [(VCI_2_LANES*4-1):0], BUS = M_VCI2
PORT vci_2_data_out = VCI_DATA_OUT, DIR = I, VEC = [(VCI_2_LANES*32-1):0], BUS = M_VCI2
PORT vci_2_flag_out = VCI_FLAG_OUT, DIR = I, VEC = [(VCI_2_LANES*4-1):0], BUS = M_VCI2
PORT vci_2_byteenable = VCI_BYTEENABLE, DIR = I, VEC = [(VCI_2_LANES*4-1):0], BUS = M_VCI2
PORT vci_2_dest_addr_in = VCI_DEST_ADDR_IN, DIR = O, VEC = [31:0], BUS = M_VCI2
PORT vci_2_dest_addr_out = VCI_DEST_ADDR_OUT, DIR = I, VEC = [31:0], BUS = M_VCI2

PORT vci_3_clk = VCI_CLK, DIR = O, SIGIS = CLK, CLK_INPORT = core_clk, BUS = M_VCI3
PORT vci_3_reset = VCI_RESET, DIR = O, SIGIS = RST, BUS = M_VCI3
PORT vci_3_valid = VCI_VALID, DIR = O, VEC = [(VCI_3_FUNCTIONS-1):0], BUS = M_VCI3
PORT vci_3_signed = VCI_SIGNED, DIR = O, BUS = M_VCI3
PORT vci_3_opsize = VCI_OPSIZE, DIR = O, VEC = [1:0], BUS = M_VCI3
PORT vci_3_vector_start = VCI_VECTOR_START, DIR = O, BUS = M_VCI3
PORT vci_3_vector_end = VCI_VECTOR_END, DIR = O, BUS = M_VCI3
PORT vci_3_byte_valid = VCI_BYTE_VALID, DIR = O, VEC = [(VCI_3_LANES*4-1):0], BUS = M_VCI3
PORT vci_3_data_a = VCI_DATA_A, DIR = O, VEC = [(VCI_3_LANES*32-1):0], BUS = M_VCI3
PORT vci_3_flag_a = VCI_FLAG_A, DIR = O, VEC = [(VCI_3_LANES*4-1):0], BUS = M_VCI3
PORT vci_3_data_b = VCI_DATA_B, DIR = O, VEC = [(VCI_3_LANES*32-1):0], BUS = M_VCI3
PORT vci_3_flag_b = VCI_FLAG_B, DIR = O, VEC = [(VCI_3_LANES*4-1):0], BUS = M_VCI3
PORT vci_3_data_out = VCI_DATA_OUT, DIR = I, VEC = [(VCI_3_LANES*32-1):0], BUS = M_VCI3
PORT vci_3_flag_out = VCI_FLAG_OUT, DIR = I, VEC = [(VCI_3_LANES*4-1):0], BUS = M_VCI3
PORT vci_3_byteenable = VCI_BYTEENABLE, DIR = I, VEC = [(VCI_3_LANES*4-1):0], BUS = M_VCI3
PORT vci_3_dest_addr_in = VCI_DEST_ADDR_IN, DIR = O, VEC = [31:0], BUS = M_VCI3
PORT vci_3_dest_addr_out = VCI_DEST_ADDR_OUT, DIR = I, VEC = [31:0], BUS = M_VCI3

PORT vci_4_clk = VCI_CLK, DIR = O, SIGIS = CLK, CLK_INPORT = core_clk, BUS = M_VCI4
PORT vci_4_reset = VCI_RESET, DIR = O, SIGIS = RST, BUS = M_VCI4
PORT vci_4_valid = VCI_VALID, DIR = O, VEC = [(VCI_4_FUNCTIONS-1):0], BUS = M_VCI4
PORT vci_4_signed = VCI_SIGNED, DIR = O, BUS = M_VCI4
PORT vci_4_opsize = VCI_OPSIZE, DIR = O, VEC = [1:0], BUS = M_VCI4
PORT vci_4_vector_start = VCI_VECTOR_START, DIR = O, BUS = M_VCI4
PORT vci_4_vector_end = VCI_VECTOR_END, DIR = O, BUS = M_VCI4
PORT vci_4_byte_valid = VCI_BYTE_VALID, DIR = O, VEC = [(VCI_4_LANES*4-1):0], BUS = M_VCI4
PORT vci_4_data_a = VCI_DATA_A, DIR = O, VEC = [(VCI_4_LANES*32-1):0], BUS = M_VCI4
PORT vci_4_flag_a = VCI_FLAG_A, DIR = O, VEC = [(VCI_4_LANES*4-1):0], BUS = M_VCI4
PORT vci_4_data_b = VCI_DATA_B, DIR = O, VEC = [(VCI_4_LANES*32-1):0], BUS = M_VCI4
PORT vci_4_flag_b = VCI_FLAG_B, DIR = O, VEC = [(VCI_4_LANES*4-1):0], BUS = M_VCI4
PORT vci_4_data_out = VCI_DATA_OUT, DIR = I, VEC = [(VCI_4_LANES*32-1):0], BUS = M_VCI4
PORT vci_4_flag_out = VCI_FLAG_OUT, DIR = I, VEC = [(VCI_4_LANES*4-1):0], BUS = M_VCI4
PORT vci_4_byteenable = VCI_BYTEENABLE, DIR = I, VEC = [(VCI_4_LANES*4-1):0], BUS = M_VCI4
PORT vci_4_dest_addr_in = VCI_DEST_ADDR_IN, DIR = O, VEC = [31:0], BUS = M_VCI4
PORT vci_4_dest_addr_out = VCI_DEST_ADDR_OUT, DIR = I, VEC = [31:0], BUS = M_VCI4

PORT vci_5_clk = VCI_CLK, DIR = O, SIGIS = CLK, CLK_INPORT = core_clk, BUS = M_VCI5
PORT vci_5_reset = VCI_RESET, DIR = O, SIGIS = RST, BUS = M_VCI5
PORT vci_5_valid = VCI_VALID, DIR = O, VEC = [(VCI_5_FUNCTIONS-1):0], BUS = M_VCI5
PORT vci_5_signed = VCI_SIGNED, DIR = O, BUS = M_VCI5
PORT vci_5_opsize = VCI_OPSIZE, DIR = O, VEC = [1:0], BUS = M_VCI5
PORT vci_5_vector_start = VCI_VECTOR_START, DIR = O, BUS = M_VCI5
PORT vci_5_vector_end = VCI_VECTOR_END, DIR = O, BUS = M_VCI5
PORT vci_5_byte_valid = VCI_BYTE_VALID, DIR = O, VEC = [(VCI_5_LANES*4-1):0], BUS = M_VCI5
PORT vci_5_data_a = VCI_DATA_A, DIR = O, VEC = [(VCI_5_LANES*32-1):0], BUS = M_VCI5
PORT vci_5_flag_a = VCI_FLAG_A, DIR = O, VEC = [(VCI_5_LANES*4-1):0], BUS = M_VCI5
PORT vci_5_data_b = VCI_DATA_B, DIR = O, VEC = [(VCI_5_LANES*32-1):0], BUS = M_VCI5
PORT vci_5_flag_b = VCI_FLAG_B, DIR = O, VEC = [(VCI_5_LANES*4-1):0], BUS = M_VCI5
PORT vci_5_data_out = VCI_DATA_OUT, DIR = I, VEC = [(VCI_5_LANES*32-1):0], BUS = M_VCI5
PORT vci_5_flag_out = VCI_FLAG_OUT, DIR = I, VEC = [(VCI_5_LANES*4-1):0], BUS = M_VCI5
PORT vci_5_byteenable = VCI_BYTEENABLE, DIR = I, VEC = [(VCI_5_LANES*4-1):0], BUS = M_VCI5
PORT vci_5_dest_addr_in = VCI_DEST_ADDR_IN, DIR = O, VEC = [31:0], BUS = M_VCI5
PORT vci_5_dest_addr_out = VCI_DEST_ADDR_OUT, DIR = I, VEC = [31:0], BUS = M_VCI5

PORT vci_6_clk = VCI_CLK, DIR = O, SIGIS = CLK, CLK_INPORT = core_clk, BUS = M_VCI6
PORT vci_6_reset = VCI_RESET, DIR = O, SIGIS = RST, BUS = M_VCI6
PORT vci_6_valid = VCI_VALID, DIR = O, VEC = [(VCI_6_FUNCTIONS-1):0], BUS = M_VCI6
PORT vci_6_signed = VCI_SIGNED, DIR = O, BUS = M_VCI6
PORT vci_6_opsize = VCI_OPSIZE, DIR = O, VEC = [1:0], BUS = M_VCI6
PORT vci_6_vector_start = VCI_VECTOR_START, DIR = O, BUS = M_VCI6
PORT vci_6_vector_end = VCI_VECTOR_END, DIR = O, BUS = M_VCI6
PORT vci_6_byte_valid = VCI_BYTE_VALID, DIR = O, VEC = [(VCI_6_LANES*4-1):0], BUS = M_VCI6
PORT vci_6_data_a = VCI_DATA_A, DIR = O, VEC = [(VCI_6_LANES*32-1):0], BUS = M_VCI6
PORT vci_6_flag_a = VCI_FLAG_A, DIR = O, VEC = [(VCI_6_LANES*4-1):0], BUS = M_VCI6
PORT vci_6_data_b = VCI_DATA_B, DIR = O, VEC = [(VCI_6_LANES*32-1):0], BUS = M_VCI6
PORT vci_6_flag_b = VCI_FLAG_B, DIR = O, VEC = [(VCI_6_LANES*4-1):0], BUS = M_VCI6
PORT vci_6_data_out = VCI_DATA_OUT, DIR = I, VEC = [(VCI_6_LANES*32-1):0], BUS = M_VCI6
PORT vci_6_flag_out = VCI_FLAG_OUT, DIR = I, VEC = [(VCI_6_LANES*4-1):0], BUS = M_VCI6
PORT vci_6_byteenable = VCI_BYTEENABLE, DIR = I, VEC = [(VCI_6_LANES*4-1):0], BUS = M_VCI6
PORT vci_6_dest_addr_in = VCI_DEST_ADDR_IN, DIR = O, VEC = [31:0], BUS = M_VCI6
PORT vci_6_dest_addr_out = VCI_DEST_ADDR_OUT, DIR = I, VEC = [31:0], BUS = M_VCI6

PORT vci_7_clk = VCI_CLK, DIR = O, SIGIS = CLK, CLK_INPORT = core_clk, BUS = M_VCI7
PORT vci_7_reset = VCI_RESET, DIR = O, SIGIS = RST, BUS = M_VCI7
PORT vci_7_valid = VCI_VALID, DIR = O, VEC = [(VCI_7_FUNCTIONS-1):0], BUS = M_VCI7
PORT vci_7_signed = VCI_SIGNED, DIR = O, BUS = M_VCI7
PORT vci_7_opsize = VCI_OPSIZE, DIR = O, VEC = [1:0], BUS = M_VCI7
PORT vci_7_vector_start = VCI_VECTOR_START, DIR = O, BUS = M_VCI7
PORT vci_7_vector_end = VCI_VECTOR_END, DIR = O, BUS = M_VCI7
PORT vci_7_byte_valid = VCI_BYTE_VALID, DIR = O, VEC = [(VCI_7_LANES*4-1):0], BUS = M_VCI7
PORT vci_7_data_a = VCI_DATA_A, DIR = O, VEC = [(VCI_7_LANES*32-1):0], BUS = M_VCI7
PORT vci_7_flag_a = VCI_FLAG_A, DIR = O, VEC = [(VCI_7_LANES*4-1):0], BUS = M_VCI7
PORT vci_7_data_b = VCI_DATA_B, DIR = O, VEC = [(VCI_7_LANES*32-1):0], BUS = M_VCI7
PORT vci_7_flag_b = VCI_FLAG_B, DIR = O, VEC = [(VCI_7_LANES*4-1):0], BUS = M_VCI7
PORT vci_7_data_out = VCI_DATA_OUT, DIR = I, VEC = [(VCI_7_LANES*32-1):0], BUS = M_VCI7
PORT vci_7_flag_out = VCI_FLAG_OUT, DIR = I, VEC = [(VCI_7_LANES*4-1):0], BUS = M_VCI7
PORT vci_7_byteenable = VCI_BYTEENABLE, DIR = I, VEC = [(VCI_7_LANES*4-1):0], BUS = M_VCI7
PORT vci_7_dest_addr_in = VCI_DEST_ADDR_IN, DIR = O, VEC = [31:0], BUS = M_VCI7
PORT vci_7_dest_addr_out = VCI_DEST_ADDR_OUT, DIR = I, VEC = [31:0], BUS = M_VCI7

PORT vci_8_clk = VCI_CLK, DIR = O, SIGIS = CLK, CLK_INPORT = core_clk, BUS = M_VCI8
PORT vci_8_reset = VCI_RESET, DIR = O, SIGIS = RST, BUS = M_VCI8
PORT vci_8_valid = VCI_VALID, DIR = O, VEC = [(VCI_8_FUNCTIONS-1):0], BUS = M_VCI8
PORT vci_8_signed = VCI_SIGNED, DIR = O, BUS = M_VCI8
PORT vci_8_opsize = VCI_OPSIZE, DIR = O, VEC = [1:0], BUS = M_VCI8
PORT vci_8_vector_start = VCI_VECTOR_START, DIR = O, BUS = M_VCI8
PORT vci_8_vector_end = VCI_VECTOR_END, DIR = O, BUS = M_VCI8
PORT vci_8_byte_valid = VCI_BYTE_VALID, DIR = O, VEC = [(VCI_8_LANES*4-1):0], BUS = M_VCI8
PORT vci_8_data_a = VCI_DATA_A, DIR = O, VEC = [(VCI_8_LANES*32-1):0], BUS = M_VCI8
PORT vci_8_flag_a = VCI_FLAG_A, DIR = O, VEC = [(VCI_8_LANES*4-1):0], BUS = M_VCI8
PORT vci_8_data_b = VCI_DATA_B, DIR = O, VEC = [(VCI_8_LANES*32-1):0], BUS = M_VCI8
PORT vci_8_flag_b = VCI_FLAG_B, DIR = O, VEC = [(VCI_8_LANES*4-1):0], BUS = M_VCI8
PORT vci_8_data_out = VCI_DATA_OUT, DIR = I, VEC = [(VCI_8_LANES*32-1):0], BUS = M_VCI8
PORT vci_8_flag_out = VCI_FLAG_OUT, DIR = I, VEC = [(VCI_8_LANES*4-1):0], BUS = M_VCI8
PORT vci_8_byteenable = VCI_BYTEENABLE, DIR = I, VEC = [(VCI_8_LANES*4-1):0], BUS = M_VCI8
PORT vci_8_dest_addr_in = VCI_DEST_ADDR_IN, DIR = O, VEC = [31:0], BUS = M_VCI8
PORT vci_8_dest_addr_out = VCI_DEST_ADDR_OUT, DIR = I, VEC = [31:0], BUS = M_VCI8

PORT vci_9_clk = VCI_CLK, DIR = O, SIGIS = CLK, CLK_INPORT = core_clk, BUS = M_VCI9
PORT vci_9_reset = VCI_RESET, DIR = O, SIGIS = RST, BUS = M_VCI9
PORT vci_9_valid = VCI_VALID, DIR = O, VEC = [(VCI_9_FUNCTIONS-1):0], BUS = M_VCI9
PORT vci_9_signed = VCI_SIGNED, DIR = O, BUS = M_VCI9
PORT vci_9_opsize = VCI_OPSIZE, DIR = O, VEC = [1:0], BUS = M_VCI9
PORT vci_9_vector_start = VCI_VECTOR_START, DIR = O, BUS = M_VCI9
PORT vci_9_vector_end = VCI_VECTOR_END, DIR = O, BUS = M_VCI9
PORT vci_9_byte_valid = VCI_BYTE_VALID, DIR = O, VEC = [(VCI_9_LANES*4-1):0], BUS = M_VCI9
PORT vci_9_data_a = VCI_DATA_A, DIR = O, VEC = [(VCI_9_LANES*32-1):0], BUS = M_VCI9
PORT vci_9_flag_a = VCI_FLAG_A, DIR = O, VEC = [(VCI_9_LANES*4-1):0], BUS = M_VCI9
PORT vci_9_data_b = VCI_DATA_B, DIR = O, VEC = [(VCI_9_LANES*32-1):0], BUS = M_VCI9
PORT vci_9_flag_b = VCI_FLAG_B, DIR = O, VEC = [(VCI_9_LANES*4-1):0], BUS = M_VCI9
PORT vci_9_data_out = VCI_DATA_OUT, DIR = I, VEC = [(VCI_9_LANES*32-1):0], BUS = M_VCI9
PORT vci_9_flag_out = VCI_FLAG_OUT, DIR = I, VEC = [(VCI_9_LANES*4-1):0], BUS = M_VCI9
PORT vci_9_byteenable = VCI_BYTEENABLE, DIR = I, VEC = [(VCI_9_LANES*4-1):0], BUS = M_VCI9
PORT vci_9_dest_addr_in = VCI_DEST_ADDR_IN, DIR = O, VEC = [31:0], BUS = M_VCI9
PORT vci_9_dest_addr_out = VCI_DEST_ADDR_OUT, DIR = I, VEC = [31:0], BUS = M_VCI9

PORT vci_10_clk = VCI_CLK, DIR = O, SIGIS = CLK, CLK_INPORT = core_clk, BUS = M_VCI10
PORT vci_10_reset = VCI_RESET, DIR = O, SIGIS = RST, BUS = M_VCI10
PORT vci_10_valid = VCI_VALID, DIR = O, VEC = [(VCI_10_FUNCTIONS-1):0], BUS = M_VCI10
PORT vci_10_signed = VCI_SIGNED, DIR = O, BUS = M_VCI10
PORT vci_10_opsize = VCI_OPSIZE, DIR = O, VEC = [1:0], BUS = M_VCI10
PORT vci_10_vector_start = VCI_VECTOR_START, DIR = O, BUS = M_VCI10
PORT vci_10_vector_end = VCI_VECTOR_END, DIR = O, BUS = M_VCI10
PORT vci_10_byte_valid = VCI_BYTE_VALID, DIR = O, VEC = [(VCI_10_LANES*4-1):0], BUS = M_VCI10
PORT vci_10_data_a = VCI_DATA_A, DIR = O, VEC = [(VCI_10_LANES*32-1):0], BUS = M_VCI10
PORT vci_10_flag_a = VCI_FLAG_A, DIR = O, VEC = [(VCI_10_LANES*4-1):0], BUS = M_VCI10
PORT vci_10_data_b = VCI_DATA_B, DIR = O, VEC = [(VCI_10_LANES*32-1):0], BUS = M_VCI10
PORT vci_10_flag_b = VCI_FLAG_B, DIR = O, VEC = [(VCI_10_LANES*4-1):0], BUS = M_VCI10
PORT vci_10_data_out = VCI_DATA_OUT, DIR = I, VEC = [(VCI_10_LANES*32-1):0], BUS = M_VCI10
PORT vci_10_flag_out = VCI_FLAG_OUT, DIR = I, VEC = [(VCI_10_LANES*4-1):0], BUS = M_VCI10
PORT vci_10_byteenable = VCI_BYTEENABLE, DIR = I, VEC = [(VCI_10_LANES*4-1):0], BUS = M_VCI10
PORT vci_10_dest_addr_in = VCI_DEST_ADDR_IN, DIR = O, VEC = [31:0], BUS = M_VCI10
PORT vci_10_dest_addr_out = VCI_DEST_ADDR_OUT, DIR = I, VEC = [31:0], BUS = M_VCI10

PORT vci_11_clk = VCI_CLK, DIR = O, SIGIS = CLK, CLK_INPORT = core_clk, BUS = M_VCI11
PORT vci_11_reset = VCI_RESET, DIR = O, SIGIS = RST, BUS = M_VCI11
PORT vci_11_valid = VCI_VALID, DIR = O, VEC = [(VCI_11_FUNCTIONS-1):0], BUS = M_VCI11
PORT vci_11_signed = VCI_SIGNED, DIR = O, BUS = M_VCI11
PORT vci_11_opsize = VCI_OPSIZE, DIR = O, VEC = [1:0], BUS = M_VCI11
PORT vci_11_vector_start = VCI_VECTOR_START, DIR = O, BUS = M_VCI11
PORT vci_11_vector_end = VCI_VECTOR_END, DIR = O, BUS = M_VCI11
PORT vci_11_byte_valid = VCI_BYTE_VALID, DIR = O, VEC = [(VCI_11_LANES*4-1):0], BUS = M_VCI11
PORT vci_11_data_a = VCI_DATA_A, DIR = O, VEC = [(VCI_11_LANES*32-1):0], BUS = M_VCI11
PORT vci_11_flag_a = VCI_FLAG_A, DIR = O, VEC = [(VCI_11_LANES*4-1):0], BUS = M_VCI11
PORT vci_11_data_b = VCI_DATA_B, DIR = O, VEC = [(VCI_11_LANES*32-1):0], BUS = M_VCI11
PORT vci_11_flag_b = VCI_FLAG_B, DIR = O, VEC = [(VCI_11_LANES*4-1):0], BUS = M_VCI11
PORT vci_11_data_out = VCI_DATA_OUT, DIR = I, VEC = [(VCI_11_LANES*32-1):0], BUS = M_VCI11
PORT vci_11_flag_out = VCI_FLAG_OUT, DIR = I, VEC = [(VCI_11_LANES*4-1):0], BUS = M_VCI11
PORT vci_11_byteenable = VCI_BYTEENABLE, DIR = I, VEC = [(VCI_11_LANES*4-1):0], BUS = M_VCI11
PORT vci_11_dest_addr_in = VCI_DEST_ADDR_IN, DIR = O, VEC = [31:0], BUS = M_VCI11
PORT vci_11_dest_addr_out = VCI_DEST_ADDR_OUT, DIR = I, VEC = [31:0], BUS = M_VCI11

PORT vci_12_clk = VCI_CLK, DIR = O, SIGIS = CLK, CLK_INPORT = core_clk, BUS = M_VCI12
PORT vci_12_reset = VCI_RESET, DIR = O, SIGIS = RST, BUS = M_VCI12
PORT vci_12_valid = VCI_VALID, DIR = O, VEC = [(VCI_12_FUNCTIONS-1):0], BUS = M_VCI12
PORT vci_12_signed = VCI_SIGNED, DIR = O, BUS = M_VCI12
PORT vci_12_opsize = VCI_OPSIZE, DIR = O, VEC = [1:0], BUS = M_VCI12
PORT vci_12_vector_start = VCI_VECTOR_START, DIR = O, BUS = M_VCI12
PORT vci_12_vector_end = VCI_VECTOR_END, DIR = O, BUS = M_VCI12
PORT vci_12_byte_valid = VCI_BYTE_VALID, DIR = O, VEC = [(VCI_12_LANES*4-1):0], BUS = M_VCI12
PORT vci_12_data_a = VCI_DATA_A, DIR = O, VEC = [(VCI_12_LANES*32-1):0], BUS = M_VCI12
PORT vci_12_flag_a = VCI_FLAG_A, DIR = O, VEC = [(VCI_12_LANES*4-1):0], BUS = M_VCI12
PORT vci_12_data_b = VCI_DATA_B, DIR = O, VEC = [(VCI_12_LANES*32-1):0], BUS = M_VCI12
PORT vci_12_flag_b = VCI_FLAG_B, DIR = O, VEC = [(VCI_12_LANES*4-1):0], BUS = M_VCI12
PORT vci_12_data_out = VCI_DATA_OUT, DIR = I, VEC = [(VCI_12_LANES*32-1):0], BUS = M_VCI12
PORT vci_12_flag_out = VCI_FLAG_OUT, DIR = I, VEC = [(VCI_12_LANES*4-1):0], BUS = M_VCI12
PORT vci_12_byteenable = VCI_BYTEENABLE, DIR = I, VEC = [(VCI_12_LANES*4-1):0], BUS = M_VCI12
PORT vci_12_dest_addr_in = VCI_DEST_ADDR_IN, DIR = O, VEC = [31:0], BUS = M_VCI12
PORT vci_12_dest_addr_out = VCI_DEST_ADDR_OUT, DIR = I, VEC = [31:0], BUS = M_VCI12

PORT vci_13_clk = VCI_CLK, DIR = O, SIGIS = CLK, CLK_INPORT = core_clk, BUS = M_VCI13
PORT vci_13_reset = VCI_RESET, DIR = O, SIGIS = RST, BUS = M_VCI13
PORT vci_13_valid = VCI_VALID, DIR = O, VEC = [(VCI_13_FUNCTIONS-1):0], BUS = M_VCI13
PORT vci_13_signed = VCI_SIGNED, DIR = O, BUS = M_VCI13
PORT vci_13_opsize = VCI_OPSIZE, DIR = O, VEC = [1:0], BUS = M_VCI13
PORT vci_13_vector_start = VCI_VECTOR_START, DIR = O, BUS = M_VCI13
PORT vci_13_vector_end = VCI_VECTOR_END, DIR = O, BUS = M_VCI13
PORT vci_13_byte_valid = VCI_BYTE_VALID, DIR = O, VEC = [(VCI_13_LANES*4-1):0], BUS = M_VCI13
PORT vci_13_data_a = VCI_DATA_A, DIR = O, VEC = [(VCI_13_LANES*32-1):0], BUS = M_VCI13
PORT vci_13_flag_a = VCI_FLAG_A, DIR = O, VEC = [(VCI_13_LANES*4-1):0], BUS = M_VCI13
PORT vci_13_data_b = VCI_DATA_B, DIR = O, VEC = [(VCI_13_LANES*32-1):0], BUS = M_VCI13
PORT vci_13_flag_b = VCI_FLAG_B, DIR = O, VEC = [(VCI_13_LANES*4-1):0], BUS = M_VCI13
PORT vci_13_data_out = VCI_DATA_OUT, DIR = I, VEC = [(VCI_13_LANES*32-1):0], BUS = M_VCI13
PORT vci_13_flag_out = VCI_FLAG_OUT, DIR = I, VEC = [(VCI_13_LANES*4-1):0], BUS = M_VCI13
PORT vci_13_byteenable = VCI_BYTEENABLE, DIR = I, VEC = [(VCI_13_LANES*4-1):0], BUS = M_VCI13
PORT vci_13_dest_addr_in = VCI_DEST_ADDR_IN, DIR = O, VEC = [31:0], BUS = M_VCI13
PORT vci_13_dest_addr_out = VCI_DEST_ADDR_OUT, DIR = I, VEC = [31:0], BUS = M_VCI13

PORT vci_14_clk = VCI_CLK, DIR = O, SIGIS = CLK, CLK_INPORT = core_clk, BUS = M_VCI14
PORT vci_14_reset = VCI_RESET, DIR = O, SIGIS = RST, BUS = M_VCI14
PORT vci_14_valid = VCI_VALID, DIR = O, VEC = [(VCI_14_FUNCTIONS-1):0], BUS = M_VCI14
PORT vci_14_signed = VCI_SIGNED, DIR = O, BUS = M_VCI14
PORT vci_14_opsize = VCI_OPSIZE, DIR = O, VEC = [1:0], BUS = M_VCI14
PORT vci_14_vector_start = VCI_VECTOR_START, DIR = O, BUS = M_VCI14
PORT vci_14_vector_end = VCI_VECTOR_END, DIR = O, BUS = M_VCI14
PORT vci_14_byte_valid = VCI_BYTE_VALID, DIR = O, VEC = [(VCI_14_LANES*4-1):0], BUS = M_VCI14
PORT vci_14_data_a = VCI_DATA_A, DIR = O, VEC = [(VCI_14_LANES*32-1):0], BUS = M_VCI14
PORT vci_14_flag_a = VCI_FLAG_A, DIR = O, VEC = [(VCI_14_LANES*4-1):0], BUS = M_VCI14
PORT vci_14_data_b = VCI_DATA_B, DIR = O, VEC = [(VCI_14_LANES*32-1):0], BUS = M_VCI14
PORT vci_14_flag_b = VCI_FLAG_B, DIR = O, VEC = [(VCI_14_LANES*4-1):0], BUS = M_VCI14
PORT vci_14_data_out = VCI_DATA_OUT, DIR = I, VEC = [(VCI_14_LANES*32-1):0], BUS = M_VCI14
PORT vci_14_flag_out = VCI_FLAG_OUT, DIR = I, VEC = [(VCI_14_LANES*4-1):0], BUS = M_VCI14
PORT vci_14_byteenable = VCI_BYTEENABLE, DIR = I, VEC = [(VCI_14_LANES*4-1):0], BUS = M_VCI14
PORT vci_14_dest_addr_in = VCI_DEST_ADDR_IN, DIR = O, VEC = [31:0], BUS = M_VCI14
PORT vci_14_dest_addr_out = VCI_DEST_ADDR_OUT, DIR = I, VEC = [31:0], BUS = M_VCI14

PORT vci_15_clk = VCI_CLK, DIR = O, SIGIS = CLK, CLK_INPORT = core_clk, BUS = M_VCI15
PORT vci_15_reset = VCI_RESET, DIR = O, SIGIS = RST, BUS = M_VCI15
PORT vci_15_valid = VCI_VALID, DIR = O, VEC = [(VCI_15_FUNCTIONS-1):0], BUS = M_VCI15
PORT vci_15_signed = VCI_SIGNED, DIR = O, BUS = M_VCI15
PORT vci_15_opsize = VCI_OPSIZE, DIR = O, VEC = [1:0], BUS = M_VCI15
PORT vci_15_vector_start = VCI_VECTOR_START, DIR = O, BUS = M_VCI15
PORT vci_15_vector_end = VCI_VECTOR_END, DIR = O, BUS = M_VCI15
PORT vci_15_byte_valid = VCI_BYTE_VALID, DIR = O, VEC = [(VCI_15_LANES*4-1):0], BUS = M_VCI15
PORT vci_15_data_a = VCI_DATA_A, DIR = O, VEC = [(VCI_15_LANES*32-1):0], BUS = M_VCI15
PORT vci_15_flag_a = VCI_FLAG_A, DIR = O, VEC = [(VCI_15_LANES*4-1):0], BUS = M_VCI15
PORT vci_15_data_b = VCI_DATA_B, DIR = O, VEC = [(VCI_15_LANES*32-1):0], BUS = M_VCI15
PORT vci_15_flag_b = VCI_FLAG_B, DIR = O, VEC = [(VCI_15_LANES*4-1):0], BUS = M_VCI15
PORT vci_15_data_out = VCI_DATA_OUT, DIR = I, VEC = [(VCI_15_LANES*32-1):0], BUS = M_VCI15
PORT vci_15_flag_out = VCI_FLAG_OUT, DIR = I, VEC = [(VCI_15_LANES*4-1):0], BUS = M_VCI15
PORT vci_15_byteenable = VCI_BYTEENABLE, DIR = I, VEC = [(VCI_15_LANES*4-1):0], BUS = M_VCI15
PORT vci_15_dest_addr_in = VCI_DEST_ADDR_IN, DIR = O, VEC = [31:0], BUS = M_VCI15
PORT vci_15_dest_addr_out = VCI_DEST_ADDR_OUT, DIR = I, VEC = [31:0], BUS = M_VCI15

###########################################################################

END
